# -*- coding: utf-8 -*-
"""DT (Train Val Test Split - cost function).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eRIg_38kSlm8C2vozRXDvl0GE09oovXR
"""

import numpy as np
from sklearn import tree
from sklearn import datasets
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
#import ipdb

dataset = datasets.load_breast_cancer()


X = dataset.data
y = dataset.target

target_names = dataset.target_names
feature_names = dataset.feature_names


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.8, random_state = 2)
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size= 0.25, random_state = 1)

best_accuracy_val = 0
best_depth = 0
for depth in range(2,20):
    accuracy_val_cumulative = 0
    for i in range(0,10):
        clf = tree.DecisionTreeClassifier(max_depth = depth,random_state=i*depth)
        clf = clf.fit(X_train, y_train)

        predictedY_train = clf.predict(X_train)
        predictedY_val = clf.predict(X_val)

        accuracy_train = accuracy_score(y_train, predictedY_train)
        accuracy_val = accuracy_score(y_val, predictedY_val)

        #print("Accuracy for training set: %f" %(accuracy_train*100))
        #print("Accuracy for validation set: %f" %(accuracy_val*100))

        accuracy_val_cumulative+= accuracy_val
    accuracy_val = accuracy_val_cumulative/i
    #ipdb.set_trace()
    if (accuracy_val*100-depth*10) > best_accuracy_val:
        best_accuracy_val = accuracy_val*100-depth*10
        best_clf = clf
        best_depth = depth


if (0):   # in this case, just for comparison, I'm not training again
    clf = best_clf
else:
    X_train_plus_val = np.concatenate((X_train,X_val))
    y_train_plus_val = np.concatenate((y_train,y_val))
    clf = tree.DecisionTreeClassifier(max_depth = depth,random_state=i+1)
    clf = clf.fit(X_train_plus_val, y_train_plus_val)

predictedY_test = clf.predict(X_test)
accuracy_test = accuracy_score(y_test, predictedY_test)

print("Accuracy for test set: %f" %(accuracy_test*100))
print("Best depth: %d" %best_depth)



# export in graphical format
import graphviz
dot_data = tree.export_graphviz(clf, out_file=None, filled=False, rounded=True, impurity=True, class_names=target_names, feature_names=feature_names)

graph = graphviz.Source(dot_data)
graph.render("graph")

# export in text format
r = tree.export_text(clf)
print('\n'+r)