# -*- coding: utf-8 -*-
"""Hard and Soft Voting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1siMlBTZQCA4NM5gaV42iwhKiDgDjTgUC
"""

from sklearn import tree
from sklearn.model_selection import train_test_split
from sklearn import datasets
from sklearn.metrics import accuracy_score
from sklearn.ensemble import VotingClassifier


dataset = datasets.load_breast_cancer()
#dataset = datasets.load_iris()

X = dataset.data
Y = dataset.target


X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3, random_state = 0)

target_names = dataset.target_names
feature_names = dataset.feature_names

clf1 = tree.DecisionTreeClassifier(min_samples_split=10,random_state=0)
clf2 = tree.DecisionTreeClassifier(max_depth=5,random_state=10)
clf3 = tree.DecisionTreeClassifier(min_impurity_decrease=0.01,random_state=20)
clf4 = tree.DecisionTreeClassifier(min_impurity_decrease=0.05,random_state=30)
clf5 = tree.DecisionTreeClassifier(min_impurity_decrease=0.10,random_state=40)

clfs = [('1',clf1), ('2',clf2), ('3',clf3), ('4',clf3), ('5',clf5)]

ensemble = VotingClassifier(estimators=clfs, voting='hard')
ensemble.fit(X_train,Y_train)

#ipdb.set_trace()
test_scores_single_clfs = [clf.score(X_test, Y_test) for clf in ensemble.estimators_]
test_scores_ensemble = ensemble.score(X_test, Y_test)

print("Desempenho de cada classificador: %s" %test_scores_single_clfs)
print("Desempenho do conjunto: %s" %test_scores_ensemble)

clf.predicta