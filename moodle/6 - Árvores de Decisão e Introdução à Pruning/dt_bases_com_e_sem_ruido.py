# -*- coding: utf-8 -*-
"""DT-bases_com_e_sem_ruido.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17FtGSER4ESzgENbpPZpw1_UXnm_7msPb

## Testes com Árvore de Decisão (Decision Trees) e bases com e sem ruído

### Teste em base sem ruído
Aqui, inicialmente testaremos o exemplo de uma árvore de decisão para um problema "bem comportado", sem ruído: uma porta lógica XOR.
"""

from sklearn import tree
import matplotlib.pyplot as plt
import numpy as np

X = np.random.random([500,2])
Y = []
for x_value in X:
    y_value = 0
    if (x_value[0] > 0.5) and (x_value[1] > 0.5):  # AND "logic"
        y_value = 1

    Y.append(y_value)

Y = np.array(Y)
X_array = np.asarray(X)

clf = tree.DecisionTreeClassifier()

clf = clf.fit(X, Y)

# mostrando em formato texto
r = tree.export_text(clf)
print('\n'+r)

# mostrando de forma gráfica
tree.plot_tree(clf)

"""### Teste Base com ruído

Aqui, geraremos artificalmente uma base com ruído.

Observe o tamanho da árvore gerada e reflita: será que esta árvore capturou a essência do problema ou apenas memorizou boa parte dos casos da base de dados?
"""

from sklearn import tree
import matplotlib.pyplot as plt
import numpy as np

X = np.random.random([500,2])
Y = []
for x_value in X:
    y_value = 0
    if (x_value[0] > 0.5) and (x_value[1] > 0.5):  # AND "logic"
        y_value = 1

    #parte aleatória
    if np.random.random() > 0.9:
        y_value = not y_value

    Y.append(y_value)

Y = np.array(Y)
X_array = np.asarray(X)

clf = tree.DecisionTreeClassifier()

clf = clf.fit(X, Y)

# mostrando em formato texto
r = tree.export_text(clf)
print('\n'+r)

# mostrando de forma gráfica
tree.plot_tree(clf)